/*
   Copyright 2013-2015 Heterogeneous System Architecture (HSA) Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef INCLUDED_HSAIL_TESTGEN_UTILITIES_H
#define INCLUDED_HSAIL_TESTGEN_UTILITIES_H

#ifdef LINUX
#define LINUX_FP_PRINT_QUIRK // makes lua scripts identical for windows and linux (for testing)
#endif

#include "HSAILTestGenInstSetManager.h"
#include "HSAILTestGenBrigContext.h"
#include "HSAILBrigContainer.h"
#include "HSAILUtilities.h"
#include "HSAILItems.h"
#include "HSAILSRef.h"
#include "Brig.h"

#include <string>
#include <sstream>

using std::string;

using HSAIL_ASM::BrigContainer;

using HSAIL_ASM::Directive;
using HSAIL_ASM::DirectiveKernel;
using HSAIL_ASM::DirectiveFunction;
using HSAIL_ASM::DirectiveExecutable;
using HSAIL_ASM::DirectiveVariable;
using HSAIL_ASM::DirectiveFbarrier;
using HSAIL_ASM::Inst;
using HSAIL_ASM::InstBasic;
using HSAIL_ASM::Operand;
using HSAIL_ASM::OperandRegister;
using HSAIL_ASM::SRef;

using HSAIL_ASM::getNaturalAlignment;

namespace TESTGEN {

// ============================================================================
// ============================================================================
//============================================================================
// Size of autogenerated arrays used for testing memory access
// Must be sufficient for worst case, i.e. 4-element 128-bit vector

#define TEST_ARRAY_SIZE (64) 

// ============================================================================
// ============================================================================
//============================================================================
// Exceptions

class TestGenError
{
private:
    string msg;

public:
    TestGenError() {}
    TestGenError(string s) : msg(s) {}
    ~TestGenError() {}

    const char *what()   const { return msg.c_str(); };
};

//=============================================================================
//=============================================================================
//=============================================================================
// AluModifier Wrapper - defined to unify emulation of InstBasic and InstMod instructions

class AluMod
{
private:
    static const unsigned ROUNDING = 0x1F;
    static const unsigned FTZ      = 0x20;

private:
    unsigned bits;

public: //F get rid of these shortcuts or use them regularly
    static const unsigned ROUNDING_NONE       = BRIG_ROUND_NONE;
    static const unsigned ROUNDING_DEFAULT    = BRIG_ROUND_FLOAT_DEFAULT;
    static const unsigned ROUNDING_NEARI      = BRIG_ROUND_INTEGER_NEAR_EVEN;
    static const unsigned ROUNDING_NEAR       = BRIG_ROUND_FLOAT_NEAR_EVEN;
    static const unsigned ROUNDING_ZEROI      = BRIG_ROUND_INTEGER_ZERO;
    static const unsigned ROUNDING_ZERO       = BRIG_ROUND_FLOAT_ZERO;
    static const unsigned ROUNDING_UPI        = BRIG_ROUND_INTEGER_PLUS_INFINITY;
    static const unsigned ROUNDING_UP         = BRIG_ROUND_FLOAT_PLUS_INFINITY;
    static const unsigned ROUNDING_DOWNI      = BRIG_ROUND_INTEGER_MINUS_INFINITY;
    static const unsigned ROUNDING_DOWN       = BRIG_ROUND_FLOAT_MINUS_INFINITY;
    static const unsigned ROUNDING_NEARI_SAT  = BRIG_ROUND_INTEGER_NEAR_EVEN_SAT;
    static const unsigned ROUNDING_ZEROI_SAT  = BRIG_ROUND_INTEGER_ZERO_SAT;
    static const unsigned ROUNDING_UPI_SAT    = BRIG_ROUND_INTEGER_PLUS_INFINITY_SAT;
    static const unsigned ROUNDING_DOWNI_SAT  = BRIG_ROUND_INTEGER_MINUS_INFINITY_SAT;

    static const unsigned ROUNDING_SNEARI     = BRIG_ROUND_INTEGER_SIGNALING_NEAR_EVEN;
    static const unsigned ROUNDING_SZEROI     = BRIG_ROUND_INTEGER_SIGNALING_ZERO;
    static const unsigned ROUNDING_SUPI       = BRIG_ROUND_INTEGER_SIGNALING_PLUS_INFINITY;
    static const unsigned ROUNDING_SDOWNI     = BRIG_ROUND_INTEGER_SIGNALING_MINUS_INFINITY;
    static const unsigned ROUNDING_SNEARI_SAT = BRIG_ROUND_INTEGER_SIGNALING_NEAR_EVEN_SAT;
    static const unsigned ROUNDING_SZEROI_SAT = BRIG_ROUND_INTEGER_SIGNALING_ZERO_SAT;
    static const unsigned ROUNDING_SUPI_SAT   = BRIG_ROUND_INTEGER_SIGNALING_PLUS_INFINITY_SAT;
    static const unsigned ROUNDING_SDOWNI_SAT = BRIG_ROUND_INTEGER_SIGNALING_MINUS_INFINITY_SAT;

public:
    AluMod(unsigned val = ROUNDING_NONE) : bits(val) { mapDefaultRounding(); }
    
    AluMod(InstBasic inst)
    {
        assert(inst);
        bits = InstSetManager::getExtMgr().getDefRounding(inst, BrigSettings::getModel(), BrigSettings::getProfile());
        mapDefaultRounding();
    }

    void mapDefaultRounding()
    {
        // Map default rounding mode to a specific value
        if (getRounding() == ROUNDING_DEFAULT) 
        {
            bits = (bits & FTZ) | ROUNDING_NEAR; //F1.0 get default rounding from TestGen option
        }
    }

public:
    //bool isFtz()           { return (bits & FTZ) != 0; }
    unsigned getRounding() { return bits & ROUNDING; }

    //bool isSat()        { return isSatRounding(getRounding()); }
    //bool isSignaling()  { return isSignalingRounding(getRounding()); }
};

//=============================================================================
//=============================================================================
//=============================================================================

void assign(Inst i, int idx, Operand opr);
void append(Inst inst, Operand opr0, Operand opr1 = Operand(), Operand opr2 = Operand());

string index2str(unsigned idx, unsigned width = 0);

#ifdef LINUX_FP_PRINT_QUIRK
string addLeadingZero2Exponent(const string& s);
#endif
} // namespace TESTGEN

// ============================================================================

#endif // INCLUDED_HSAIL_TESTGEN_UTILITIES_H
