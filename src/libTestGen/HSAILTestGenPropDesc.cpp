/*
   Copyright 2013-2015 Heterogeneous System Architecture (HSA) Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#include "HSAILTestGenPropDesc.h"
#include "HSAILValidatorBase.h"

#include "HSAILItems.h"
#include "Brig.h"

//==============================================================================
//==============================================================================
//==============================================================================
// Description of test properties (autogenerated)

#define PROPDESC
#include "HSAILTestGen_gen.hpp"
#undef PROPDESC

using HSAIL_ASM::PropDescImpl;

//==============================================================================
//==============================================================================
//==============================================================================

namespace TESTGEN {

static PropDescImpl* impl = 0;

void PropDesc::init(unsigned model, unsigned profile)  { impl = new PropDescImpl(model, profile); }
void PropDesc::clean()                                 { delete impl; impl = 0; }

      bool      PropDesc::isBrigProp(unsigned propId)                                 { return PropDescImpl::isBrigProp(propId); }
const unsigned* PropDesc::getPropVals(unsigned propId, unsigned& num)                 { return PropDescImpl::getPropVals(propId, num); }
const unsigned* PropDesc::getOpcodes(unsigned& num)                                   { return PropDescImpl::getOpcodes(num); }
const unsigned* PropDesc::getProps(unsigned opcode, unsigned& prm, unsigned& sec)     { return PropDescImpl::getProps(opcode, prm, sec); }
const unsigned* PropDesc::getPropVals(unsigned opcode, unsigned propId, unsigned& num){ return PropDescImpl::getPropVals(opcode, propId, num); }
      unsigned  PropDesc::getFormat(unsigned opcode)                                  { return PropDescImpl::getFormat(opcode); }
      bool      PropDesc::isValidProp(Inst inst, unsigned propId)                     { assert(impl); return impl->isValidProp(inst, propId); }
      bool      PropDesc::validatePrimaryProps(Inst inst)                             { assert(impl); return impl->validatePrimaryProps(inst); }
      bool      PropDesc::isValidInst(Inst inst)                                      { assert(impl); return impl->isValidInst(inst); }

}; // namespace TESTGEN

//==============================================================================
//==============================================================================
//==============================================================================


